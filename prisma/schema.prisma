generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  like         like[]
  comments     comment[]
  notification notification[]
}

model eventPost {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  like         like[]
  comments     comment[]
  notification notification[]

  startAt      DateTime
  endAt        DateTime
  localisation String

  userInterested userInterested[]
}

model salePost {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  like         like[]
  comments     comment[]
  notification notification[]

  categoryId BigInt
  category   category @relation(fields: [categoryId], references: [id])

  price      Int?
  isDonation Boolean
}

model culturePost {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  like         like[]
  comments     comment[]
  notification notification[]

  userReads userRead[]
}

model like {
  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  postId        BigInt
  post          post         @relation(fields: [postId], references: [id])
  eventPost     eventPost?   @relation(fields: [eventPostId], references: [id])
  eventPostId   BigInt?
  salePost      salePost?    @relation(fields: [salePostId], references: [id])
  salePostId    BigInt?
  culturePost   culturePost? @relation(fields: [culturePostId], references: [id])
  culturePostId BigInt?

  @@id([userId, postId])
}

model user {
  id              BigInt   @id @default(autoincrement())
  firstName       String
  lastName        String
  mail            String   @unique
  password        String
  bio             String
  avatar          String
  role            role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  posts          post[]
  likes          like[]
  userReads      userRead[]
  comments       comment[]
  userInterested userInterested[]

  messagesSent     message[]      @relation("sender")
  messagesReceived message[]      @relation("receiver")

  notification     notification[]
  eventPosts       eventPost[]
  salePost         salePost[]
  culturePosts     culturePost[]
}

model userInterested {
  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  eventPostId BigInt
  eventPost   eventPost @relation(fields: [eventPostId], references: [id])

  @@id([userId, eventPostId])
}

model city {
  id BigInt @id @default(autoincrement())

  name    String
  zipCode String

  users        user[]
  posts        post[]
  eventPosts   eventPost[]
  salePosts    salePost[]
  culturePosts culturePost[]
}

model userRead {
  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  culturePostId BigInt
  culturePost   culturePost @relation(fields: [culturePostId], references: [id])

  @@id([userId, culturePostId])
}

model category {
  id        BigInt     @id @default(autoincrement())
  name      String
  salePosts salePost[]
}

enum role {
  USER
  LEGISLATOR
  ADMIN
}

model comment {
  id        BigInt   @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  postId BigInt?
  post   post?   @relation(fields: [postId], references: [id])

  eventPostId BigInt?
  eventPost   eventPost? @relation(fields: [eventPostId], references: [id])

  salePostId BigInt?
  salePost   salePost? @relation(fields: [salePostId], references: [id])

  culturePostId BigInt?
  culturePost   culturePost? @relation(fields: [culturePostId], references: [id])
}

model message {
  id        BigInt   @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  senderId BigInt
  sender   user   @relation("sender", fields: [senderId], references: [id])

  receiverId BigInt
  receiver   user   @relation("receiver", fields: [receiverId], references: [id])

  notifications notification[]
}

model notification {
  type      String // e.g., "like", "comment", "message"
  userId    BigInt
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])

  postId BigInt?
  post   post?   @relation(fields: [postId], references: [id])

  eventPostId BigInt?
  eventPost   eventPost? @relation(fields: [eventPostId], references: [id])

  salePostId BigInt?
  salePost   salePost? @relation(fields: [salePostId], references: [id])

  culturePostId BigInt?
  culturePost   culturePost? @relation(fields: [culturePostId], references: [id])

  messageId BigInt?
  message   message? @relation(fields: [messageId], references: [id])
}
