// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model post {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  likes              like[]
  comments           comment[]
  notifications      notification[]
  type               postType
  eventPosts         eventPost[]
  goodsServicesPosts goodsServicesPost[]
  culturePosts       culturePost[]
}

model eventPost {
  postId BigInt @id
  post   post   @relation(fields: [postId], references: [id])

  startAt      DateTime
  endAt        DateTime
  localisation String

  userInterested userInterested[]
}

model goodsServicesPost {
  postId BigInt @id
  post   post   @relation(fields: [postId], references: [id])

  categoryId BigInt
  category   category @relation(fields: [categoryId], references: [id])

  price      Int?
  isDonation Boolean
}

model culturePost {
  postId BigInt @id
  post   post   @relation(fields: [postId], references: [id])

  userReads userRead[]
}

model like {
  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  postId BigInt
  post   post   @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model user {
  id              BigInt   @id @default(autoincrement())
  firstName       String
  lastName        String
  mail            String   @unique
  password        String
  bio             String
  avatar          String
  role            role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  cityId BigInt
  city   city   @relation(fields: [cityId], references: [id])

  posts          post[]
  likes          like[]
  userReads      userRead[]
  comments       comment[]
  userInterested userInterested[]

  messagesSent     message[]      @relation("sender")
  messagesReceived message[]      @relation("receiver")
  notifications    notification[]
}

model userInterested {
  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  eventPostId BigInt
  eventPost   eventPost @relation(fields: [eventPostId], references: [postId])

  @@id([userId, eventPostId])
}

model city {
  id BigInt @id @default(autoincrement())

  name    String
  zipCode String

  users user[]
  posts post[]
}

model userRead {
  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  culturePostId BigInt
  culturePost   culturePost @relation(fields: [culturePostId], references: [postId])

  @@id([userId, culturePostId])
}

enum postType {
  CULTURE
  GOODS_SERVICES
  EVENT
}

model category {
  id                BigInt              @id @default(autoincrement())
  name              String
  goodsServicesPost goodsServicesPost[]
}

enum role {
  USER
  LEGISLATOR
  ADMIN
}

model comment {
  text      String
  createdAt DateTime @default(now())

  userId BigInt
  user   user   @relation(fields: [userId], references: [id])

  postId BigInt
  post   post   @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model message {
  id        BigInt   @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  senderId BigInt
  sender   user   @relation("sender", fields: [senderId], references: [id])

  receiverId BigInt
  receiver   user   @relation("receiver", fields: [receiverId], references: [id])

  notifications notification[]
}

model notification {
  type      String // e.g., "like", "comment", "message"
  userId    BigInt
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])

  postId BigInt?
  post   post?   @relation(fields: [postId], references: [id])

  messageId BigInt
  message   message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
}
