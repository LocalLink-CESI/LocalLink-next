generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  firstName String
  lastName  String
  bio       String?
  avatar    String  @default("https://placehold.co/600x400")

  password String
  role     Role   @default(USER)

  cityId BigInt
  city   City   @relation(fields: [cityId], references: [id])

  posts          Post[]
  likes          Like[]
  userReads      UserRead[]
  comments       Comment[]
  userInterested UserInterested[]

  messagesSent     Message[] @relation("sender")
  messagesReceived Message[] @relation("receiver")

  notifications Notification[]
  eventPosts    EventPost[]
  salePost      SalePost[]
  culturePosts  CulturePost[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   City   @relation(fields: [cityId], references: [id])

  likes         Like[]
  comments      Comment[]
  notifications Notification[]
}

model EventPost {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   City   @relation(fields: [cityId], references: [id])

  likes         Like[]
  comments      Comment[]
  notifications Notification[]

  startAt      DateTime
  endAt        DateTime
  localisation String

  userInterested UserInterested[]
}

model SalePost {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   City   @relation(fields: [cityId], references: [id])

  likes         Like[]
  comments      Comment[]
  notifications Notification[]

  categoryId BigInt
  category   Category @relation(fields: [categoryId], references: [id])

  price      Int?
  isDonation Boolean
}

model CulturePost {
  id        BigInt  @id @default(autoincrement())
  title     String
  text      String
  media     Json?
  isVisible Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  cityId BigInt
  city   City   @relation(fields: [cityId], references: [id])

  likes         Like[]
  comments      Comment[]
  notifications Notification[]

  userReads UserRead[]
}

model Like {
  id     BigInt @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId        BigInt?
  post          Post?        @relation(fields: [postId], references: [id])
  eventPost     EventPost?   @relation(fields: [eventPostId], references: [id])
  eventPostId   BigInt?
  salePost      SalePost?    @relation(fields: [salePostId], references: [id])
  salePostId    BigInt?
  culturePost   CulturePost? @relation(fields: [culturePostId], references: [id])
  culturePostId BigInt?
}

model UserInterested {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  eventPostId BigInt
  eventPost   EventPost @relation(fields: [eventPostId], references: [id])

  @@id([userId, eventPostId])
}

model City {
  id BigInt @id @default(autoincrement())

  name    String
  zipCode String

  latitude  String
  longitude String

  users        User[]
  posts        Post[]
  eventPosts   EventPost[]
  salePosts    SalePost[]
  culturePosts CulturePost[]
}

model UserRead {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  culturePostId BigInt
  culturePost   CulturePost @relation(fields: [culturePostId], references: [id])

  @@id([userId, culturePostId])
}

model Category {
  id        BigInt     @id @default(autoincrement())
  name      String
  salePosts SalePost[]
}

enum Role {
  USER
  LEGISLATOR
  ADMIN
}

model Comment {
  id        BigInt   @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId BigInt?
  post   Post?   @relation(fields: [postId], references: [id])

  eventPostId BigInt?
  eventPost   EventPost? @relation(fields: [eventPostId], references: [id])

  salePostId BigInt?
  salePost   SalePost? @relation(fields: [salePostId], references: [id])

  culturePostId BigInt?
  culturePost   CulturePost? @relation(fields: [culturePostId], references: [id])
}

model Message {
  id        BigInt   @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  senderId String
  sender   User   @relation("sender", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("receiver", fields: [receiverId], references: [id])

  notifications Notification[]
}

model Notification {
  type   String // e.g., "like", "comment", "message"
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  postId BigInt?
  post   Post?   @relation(fields: [postId], references: [id])

  eventPostId BigInt?
  eventPost   EventPost? @relation(fields: [eventPostId], references: [id])

  salePostId BigInt?
  salePost   SalePost? @relation(fields: [salePostId], references: [id])

  culturePostId BigInt?
  culturePost   CulturePost? @relation(fields: [culturePostId], references: [id])

  messageId BigInt?
  message   Message? @relation(fields: [messageId], references: [id])

  @@id([userId, type, createdAt])
}
