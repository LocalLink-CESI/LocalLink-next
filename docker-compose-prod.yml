services:
  locallink-next:
    container_name: locallink-next
    build:
      context: .
      target: next
    environment:
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - ".:/app"
    command: ["npm", "run", "start"]
    depends_on:
      locallink-db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`locallink.site`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"
      - "traefik.http.services.whoami.loadbalancer.server.port=3000"
      - "traefik.docker.network=internet"
    networks:
      - locallink

  traefik:
    image: "traefik:v3.1"
    container_name: "traefik"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=hamoncelian@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - locallink

  locallink-db:
    container_name: locallink-db
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - locallink

  # locallink-adminer:
  #   container_name: locallink-adminer
  #   image: adminer
  #   #    restart: always
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     locallink-db:
  #       condition: service_healthy

networks:
  locallink:
    driver: bridge
    external: true
    name: locallink